package tilaajat.test;
// Generated by ComTest BEGIN
import java.util.*;
import kanta.SailoException;
import java.io.*;
import java.io.IOException;
import java.io.File;
import fi.jyu.mit.ohj2.VertaaTiedosto;
import static org.junit.Assert.*;
import org.junit.*;
import tilaajat.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.24 18:07:18 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class TuoteTest {



  // Generated by ComTest BEGIN
  /** testGetPostiosoitteita33 */
  @Test
  public void testGetPostiosoitteita33() {    // Tuote: 33
    Tuote akuankka = new Tuote(); 
    assertEquals("From: Tuote line: 35", 0, akuankka.getPostiosoitteita()); 
    akuankka.lisaa(new Postiosoite(10)); 
    assertEquals("From: Tuote line: 37", 1, akuankka.getPostiosoitteita()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTilaajia48 */
  @Test
  public void testGetTilaajia48() {    // Tuote: 48
    Tuote akuankka = new Tuote(); 
    assertEquals("From: Tuote line: 50", 0, akuankka.getTilaajia()); 
    akuankka.lisaa(new Tilaaja(10)); 
    assertEquals("From: Tuote line: 52", 1, akuankka.getTilaajia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa63 */
  @Test
  public void testLisaa63() {    // Tuote: 63
    Tuote akuankka = new Tuote(); 
    Postiosoite helsinki1 = new Postiosoite(10), helsinki2 = new Postiosoite(20); 
    assertEquals("From: Tuote line: 66", 0, akuankka.getPostiosoitteita()); 
    akuankka.lisaa(helsinki1); assertEquals("From: Tuote line: 67", 1, akuankka.getPostiosoitteita()); 
    akuankka.lisaa(helsinki2); assertEquals("From: Tuote line: 68", 2, akuankka.getPostiosoitteita()); 
    akuankka.lisaa(helsinki1); assertEquals("From: Tuote line: 69", 2, akuankka.getPostiosoitteita());  // Vain yksi samaa postinumeroa
    assertEquals("From: Tuote line: 70", helsinki1, akuankka.annaPostiosoite(0)); 
    assertEquals("From: Tuote line: 71", helsinki2, akuankka.annaPostiosoite(1)); 
    try {
    assertEquals("From: Tuote line: 72", helsinki1, akuankka.annaPostiosoite(2)); 
    fail("Tuote: 72 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    assertEquals("From: Tuote line: 73", false, akuankka.annaPostiosoite(1) == helsinki1); 
    assertEquals("From: Tuote line: 74", true, akuankka.annaPostiosoite(1) == helsinki2); 
    akuankka.lisaa(new Postiosoite(30)); assertEquals("From: Tuote line: 75", 3, akuankka.getPostiosoitteita()); 
    assertEquals("From: Tuote line: 76", "", akuankka.annaPostiosoite(0).getPostitoimipaikka()); 
    akuankka.lisaa(new Postiosoite(10, "HELSINKI")); assertEquals("From: Tuote line: 77", 3, akuankka.getPostiosoitteita()); 
    assertEquals("From: Tuote line: 78", "HELSINKI", akuankka.annaPostiosoite(0).getPostitoimipaikka()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLisaa89 */
  @Test
  public void testLisaa89() {    // Tuote: 89
    Tuote akuankka = new Tuote(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    matti1.rekisteroi(); matti2.rekisteroi(); 
    assertEquals("From: Tuote line: 93", 0, akuankka.getTilaajia()); 
    akuankka.lisaa(matti1); assertEquals("From: Tuote line: 94", 1, akuankka.getTilaajia()); 
    akuankka.lisaa(matti2); assertEquals("From: Tuote line: 95", 2, akuankka.getTilaajia()); 
    akuankka.lisaa(matti1); assertEquals("From: Tuote line: 96", 3, akuankka.getTilaajia()); 
    assertEquals("From: Tuote line: 97", matti1, akuankka.annaTilaaja(0)); 
    assertEquals("From: Tuote line: 98", matti2, akuankka.annaTilaaja(1)); 
    assertEquals("From: Tuote line: 99", matti1, akuankka.annaTilaaja(2)); 
    assertEquals("From: Tuote line: 100", false, akuankka.annaTilaaja(1) == matti1); 
    assertEquals("From: Tuote line: 101", true, akuankka.annaTilaaja(1) == matti2); 
    try {
    assertEquals("From: Tuote line: 102", matti1, akuankka.annaTilaaja(3)); 
    fail("Tuote: 102 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    akuankka.lisaa(matti1); assertEquals("From: Tuote line: 103", 4, akuankka.getTilaajia()); 
    akuankka.lisaa(matti1); assertEquals("From: Tuote line: 104", 5, akuankka.getTilaajia()); 
    akuankka.lisaa(matti1); assertEquals("From: Tuote line: 105", 6, akuankka.getTilaajia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa117 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa117() throws CloneNotSupportedException {    // Tuote: 117
    Tuote tuote = new Tuote(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    matti1.rekisteroi(); matti2.rekisteroi(); 
    assertEquals("From: Tuote line: 122", 0, tuote.getTilaajia()); 
    tuote.korvaaTaiLisaa(matti1); assertEquals("From: Tuote line: 123", 1, tuote.getTilaajia()); 
    tuote.korvaaTaiLisaa(matti2); assertEquals("From: Tuote line: 124", 2, tuote.getTilaajia()); 
    Tilaaja matti3 = matti1.clone(); 
    assertEquals("From: Tuote line: 126", "", matti1.anna(1)); 
    matti3.aseta(1, "matti3"); 
    assertEquals("From: Tuote line: 128", false, matti3.anna(1).equals(matti1.anna(1)));  // eri nimet
    assertEquals("From: Tuote line: 129", matti1.getTilaajaID(), matti3.getTilaajaID());  // sama tilaajaID
    tuote.korvaaTaiLisaa(matti3); assertEquals("From: Tuote line: 130", 2, tuote.getTilaajia()); 
    assertEquals("From: Tuote line: 131", "matti3", tuote.annaTilaaja(0).anna(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaPostiosoite144 */
  @Test
  public void testAnnaPostiosoite144() {    // Tuote: 144
    Tuote akuankka = new Tuote(); 
    Postiosoite helsinki1 = new Postiosoite(10), helsinki2 = new Postiosoite(20); 
    akuankka.lisaa(helsinki1); 
    assertEquals("From: Tuote line: 148", helsinki1, akuankka.annaPostiosoite(0)); 
    try {
    assertEquals("From: Tuote line: 149", helsinki2, akuankka.annaPostiosoite(1)); 
    fail("Tuote: 149 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    akuankka.lisaa(helsinki2); 
    assertEquals("From: Tuote line: 151", helsinki2, akuankka.annaPostiosoite(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaPostiosoitePostinumeronPerusteella163 */
  @Test
  public void testAnnaPostiosoitePostinumeronPerusteella163() {    // Tuote: 163
    Tuote akuankka = new Tuote(); 
    Postiosoite helsinki1 = new Postiosoite(10), helsinki2 = new Postiosoite(20); 
    akuankka.lisaa(helsinki1); 
    akuankka.lisaa(helsinki2); 
    assertEquals("From: Tuote line: 168", null, akuankka.annaPostiosoitePostinumeronPerusteella(0)); 
    assertEquals("From: Tuote line: 169", helsinki1, akuankka.annaPostiosoitePostinumeronPerusteella(10)); 
    Postiosoite helsinki3 = new Postiosoite(10); akuankka.lisaa(helsinki3); 
    assertEquals("From: Tuote line: 171", helsinki1, akuankka.annaPostiosoitePostinumeronPerusteella(10)); 
    assertEquals("From: Tuote line: 172", helsinki2, akuankka.annaPostiosoitePostinumeronPerusteella(20)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaTilaaja185 */
  @Test
  public void testAnnaTilaaja185() {    // Tuote: 185
    Tuote akuankka = new Tuote(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    akuankka.lisaa(matti1); 
    assertEquals("From: Tuote line: 189", matti1, akuankka.annaTilaaja(0)); 
    try {
    assertEquals("From: Tuote line: 190", matti2, akuankka.annaTilaaja(1)); 
    fail("Tuote: 190 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    akuankka.lisaa(matti2); 
    assertEquals("From: Tuote line: 192", matti2, akuankka.annaTilaaja(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaTilaajat204 */
  @Test
  public void testAnnaTilaajat204() {    // Tuote: 204
    Tuote akuankka = new Tuote(); 
    Tilaaja matti1 = new Tilaaja(10); akuankka.lisaa(matti1); 
    Tilaaja matti2 = new Tilaaja(20); akuankka.lisaa(matti2); 
    Tilaaja matti3 = new Tilaaja(30); akuankka.lisaa(matti3); 
    Tilaaja matti4 = new Tilaaja(10); akuankka.lisaa(matti4); 
    Tilaaja matti5 = new Tilaaja(10); akuankka.lisaa(matti5); 
    Tilaaja matti6 = new Tilaaja(20); akuankka.lisaa(matti6); 
    List<Tilaaja> loytyneet; 
    loytyneet = akuankka.annaTilaajat(new Postiosoite()); 
    assertEquals("From: Tuote line: 217", 0, loytyneet.size()); 
    loytyneet = akuankka.annaTilaajat(new Postiosoite(20)); 
    assertEquals("From: Tuote line: 219", 2, loytyneet.size()); 
    assertEquals("From: Tuote line: 220", true, loytyneet.get(0) == matti2); 
    assertEquals("From: Tuote line: 221", true, loytyneet.get(1) == matti6); 
    loytyneet = akuankka.annaTilaajat(new Postiosoite(30)); 
    assertEquals("From: Tuote line: 223", 1, loytyneet.size()); 
    assertEquals("From: Tuote line: 224", true, loytyneet.get(0) == matti3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista236 */
  @Test
  public void testPoista236() {    // Tuote: 236
    Tuote tuote = new Tuote(); 
    Tilaaja tilaaja1 = new Tilaaja(); tilaaja1.parse(" 3|Tietäväinen Teijo||||40014||1"); 
    Tilaaja tilaaja2 = new Tilaaja(); tilaaja2.parse(" 9|Meikäläinen Matti||||00010||1"); 
    Tilaaja tilaaja3 = new Tilaaja(); tilaaja3.parse("13|Tietäväinen Tuija||||40014||0"); 
    tuote.lisaa(tilaaja1); tuote.lisaa(tilaaja2); tuote.lisaa(tilaaja3); ; 
    Postiosoite postiosoite1 = new Postiosoite(); postiosoite1.parse("00010|HELSINKI"); 
    Postiosoite postiosoite2 = new Postiosoite(); postiosoite2.parse("40014|JYVÄSKYLÄN YLIOPISTO"); 
    tuote.lisaa(postiosoite1); tuote.lisaa(postiosoite2); 
    assertEquals("From: Tuote line: 245", 3, tuote.getTilaajia()); assertEquals("From: Tuote line: 245", 2, tuote.getPostiosoitteita()); 
    tuote.poista(tilaaja1); 
    assertEquals("From: Tuote line: 247", 2, tuote.getTilaajia()); assertEquals("From: Tuote line: 247", 2, tuote.getPostiosoitteita()); 
    tuote.poista(tilaaja2); 
    assertEquals("From: Tuote line: 249", 1, tuote.getTilaajia()); assertEquals("From: Tuote line: 249", 1, tuote.getPostiosoitteita()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi267 */
  @Test
  public void testEtsi267() {    // Tuote: 267
    Tuote tuote = new Tuote(); 
    Tilaaja tilaaja1 = new Tilaaja(); tilaaja1.parse(" 1|Pukki Joulu      ||||99999||1"); 
    Tilaaja tilaaja2 = new Tilaaja(); tilaaja2.parse(" 3|Tietäväinen Teijo||||40014||1"); 
    Tilaaja tilaaja3 = new Tilaaja(); tilaaja3.parse(" 4|Toljanteri Tonttu||||99999||0"); 
    Tilaaja tilaaja4 = new Tilaaja(); tilaaja4.parse(" 9|Meikäläinen Matti||||00010||1"); 
    Tilaaja tilaaja5 = new Tilaaja(); tilaaja5.parse("13|Tietäväinen Tuija||||40014||0"); 
    tuote.lisaa(tilaaja1); tuote.lisaa(tilaaja2); tuote.lisaa(tilaaja3); 
    tuote.lisaa(tilaaja4); tuote.lisaa(tilaaja5); 
    List<Tilaaja> loytyneet; 
    loytyneet = tuote.etsi("*k*", 1);  // etsi nimen perusteella
    assertEquals("From: Tuote line: 279", 2, loytyneet.size()); 
    assertEquals("From: Tuote line: 280", true, loytyneet.get(0) == tilaaja1); 
    assertEquals("From: Tuote line: 281", true, loytyneet.get(1) == tilaaja4); 
    loytyneet = tuote.etsi("*0*", 7);  // etsi maksettu perusteella
    assertEquals("From: Tuote line: 284", 2, loytyneet.size()); 
    assertEquals("From: Tuote line: 285", true, loytyneet.get(0) == tilaaja3); 
    assertEquals("From: Tuote line: 286", true, loytyneet.get(1) == tilaaja5); 
    loytyneet = tuote.etsi(null, -1); 
    assertEquals("From: Tuote line: 289", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiPostitoimipaikka301 */
  @Test
  public void testEtsiPostitoimipaikka301() {    // Tuote: 301
    Tuote tuote = new Tuote(); 
    Tilaaja tilaaja1 = new Tilaaja(); tilaaja1.parse(" 3|Tietäväinen Teijo||||40014||1"); 
    Tilaaja tilaaja2 = new Tilaaja(); tilaaja2.parse(" 9|Meikäläinen Matti||||00010||1"); 
    Tilaaja tilaaja3 = new Tilaaja(); tilaaja3.parse("13|Tietäväinen Tuija||||40014||0"); 
    tuote.lisaa(tilaaja1); tuote.lisaa(tilaaja2); tuote.lisaa(tilaaja3); ; 
    Postiosoite postiosoite1 = new Postiosoite(); postiosoite1.parse("00010|HELSINKI"); 
    Postiosoite postiosoite2 = new Postiosoite(); postiosoite2.parse("40014|JYVÄSKYLÄN YLIOPISTO"); 
    tuote.lisaa(postiosoite1); tuote.lisaa(postiosoite2); 
    List<Tilaaja> loytyneet; 
    loytyneet = tuote.etsiPostitoimipaikka("*k*"); 
    assertEquals("From: Tuote line: 313", 3, loytyneet.size()); 
    loytyneet = tuote.etsiPostitoimipaikka("J*"); 
    assertEquals("From: Tuote line: 316", 2, loytyneet.size()); 
    assertEquals("From: Tuote line: 317", true, loytyneet.get(0) == tilaaja1); 
    assertEquals("From: Tuote line: 318", true, loytyneet.get(1) == tilaaja3); 
    loytyneet = tuote.etsiPostitoimipaikka(null); 
    assertEquals("From: Tuote line: 321", 3, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta349 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta349() throws SailoException {    // Tuote: 349
    Tuote tuote = new Tuote(); 
    Postiosoite helsinki1 = new Postiosoite(10); helsinki1.taytaHelsinkiTiedoilla(); 
    Postiosoite helsinki2 = new Postiosoite(20); helsinki2.taytaHelsinkiTiedoilla(); 
    Postiosoite helsinki3 = new Postiosoite(30); helsinki3.taytaHelsinkiTiedoilla(); 
    Tilaaja matti21 = new Tilaaja(); matti21.taytaMattiTiedoilla(helsinki2.getPostinumero()); 
    Tilaaja matti11 = new Tilaaja(); matti11.taytaMattiTiedoilla(helsinki1.getPostinumero()); 
    Tilaaja matti22 = new Tilaaja(); matti22.taytaMattiTiedoilla(helsinki2.getPostinumero()); 
    Tilaaja matti12 = new Tilaaja(); matti12.taytaMattiTiedoilla(helsinki1.getPostinumero()); 
    Tilaaja matti23 = new Tilaaja(); matti23.taytaMattiTiedoilla(helsinki2.getPostinumero()); 
    String hakemisto = "testituote"; 
    File dir = new File(hakemisto); 
    File fptied  = new File(hakemisto+"/postiosoitteet.dat"); 
    File fttied = new File(hakemisto+"/tilaajat.dat"); 
    dir.mkdir(); 
    fptied.delete(); 
    fttied.delete(); 
    try {
    tuote.lueTiedostosta(hakemisto); 
    fail("Tuote: 374 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    tuote.lisaa(helsinki1); assertEquals("From: Tuote line: 375", helsinki1, tuote.annaPostiosoite(0)); 
    tuote.lisaa(helsinki2); assertEquals("From: Tuote line: 376", helsinki2, tuote.annaPostiosoite(1)); 
    try {
    assertEquals("From: Tuote line: 377", helsinki1, tuote.annaPostiosoite(2)); 
    fail("Tuote: 377 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    assertEquals("From: Tuote line: 378", 2, tuote.getPostiosoitteita()); 
    tuote.lisaa(matti21); assertEquals("From: Tuote line: 379", matti21, tuote.annaTilaaja(0)); 
    tuote.lisaa(matti11); assertEquals("From: Tuote line: 380", matti11, tuote.annaTilaaja(1)); 
    tuote.lisaa(matti22); assertEquals("From: Tuote line: 381", matti22, tuote.annaTilaaja(2)); 
    tuote.lisaa(matti12); assertEquals("From: Tuote line: 382", matti12, tuote.annaTilaaja(3)); 
    tuote.lisaa(matti23); assertEquals("From: Tuote line: 383", matti23, tuote.annaTilaaja(4)); 
    try {
    assertEquals("From: Tuote line: 384", matti21, tuote.annaTilaaja(5)); 
    fail("Tuote: 384 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    assertEquals("From: Tuote line: 385", 5, tuote.getTilaajia()); 
    tuote.tallenna(); 
    tuote = new Tuote(); 
    assertEquals("From: Tuote line: 390", 0, tuote.getPostiosoitteita()); assertEquals("From: Tuote line: 390", 0, tuote.getTilaajia()); 
    tuote.lueTiedostosta(hakemisto); 
    assertEquals("From: Tuote line: 392", 2, tuote.getPostiosoitteita()); assertEquals("From: Tuote line: 392", 5, tuote.getTilaajia()); 
    List<Tilaaja> loytyneet = tuote.annaTilaajat(helsinki1); 
    assertEquals("From: Tuote line: 394", 2, loytyneet.size()); 
    loytyneet = tuote.annaTilaajat(helsinki2); 
    assertEquals("From: Tuote line: 396", 3, loytyneet.size()); 
    tuote.lisaa(helsinki3); 
    tuote.lisaa(new Tilaaja(helsinki3.getPostinumero())); 
    tuote.tallenna(); 
    assertEquals("From: Tuote line: 402", true, fptied.delete()); 
    assertEquals("From: Tuote line: 403", true, fttied.delete()); 
    File fbak = new File(hakemisto+"/postiosoitteet.bak"); 
    File fhbak = new File(hakemisto+"/tilaajat.bak"); 
    assertEquals("From: Tuote line: 406", true, fbak.delete()); 
    assertEquals("From: Tuote line: 407", true, fhbak.delete()); 
    assertEquals("From: Tuote line: 408", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTallenna425 
   * @throws SailoException when error
   * @throws IOException when error
   */
  @Test
  public void testTallenna425() throws SailoException, IOException {    // Tuote: 425
    Tuote tuote = new Tuote(); 
    Postiosoite helsinki1 = new Postiosoite(10); helsinki1.taytaHelsinkiTiedoilla(); 
    Postiosoite helsinki2 = new Postiosoite(20); helsinki2.taytaHelsinkiTiedoilla(); 
    Postiosoite helsinki3 = new Postiosoite(30); helsinki3.taytaHelsinkiTiedoilla(); 
    Tilaaja matti21 = new Tilaaja(); matti21.taytaMattiTiedoilla(helsinki2.getPostinumero()); 
    Tilaaja matti11 = new Tilaaja(); matti11.taytaMattiTiedoilla(helsinki1.getPostinumero()); 
    Tilaaja matti22 = new Tilaaja(); matti22.taytaMattiTiedoilla(helsinki2.getPostinumero()); 
    Tilaaja matti12 = new Tilaaja(); matti12.taytaMattiTiedoilla(helsinki1.getPostinumero()); 
    Tilaaja matti23 = new Tilaaja(); matti23.taytaMattiTiedoilla(helsinki2.getPostinumero()); 
    String hakemisto = "testituote"; 
    File dir = new File(hakemisto); 
    File fptied  = new File(hakemisto+"/postiosoitteet.dat"); 
    File fttied = new File(hakemisto+"/tilaajat.dat"); 
    dir.mkdir(); 
    fptied.delete(); 
    fttied.delete(); 
    try {
    tuote.lueTiedostosta(hakemisto); 
    fail("Tuote: 450 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    tuote.lisaa(helsinki1); assertEquals("From: Tuote line: 451", helsinki1, tuote.annaPostiosoite(0)); 
    tuote.lisaa(helsinki2); assertEquals("From: Tuote line: 452", helsinki2, tuote.annaPostiosoite(1)); 
    assertEquals("From: Tuote line: 453", 2, tuote.getPostiosoitteita()); 
    tuote.lisaa(matti21); assertEquals("From: Tuote line: 454", matti21, tuote.annaTilaaja(0)); 
    tuote.lisaa(matti11); assertEquals("From: Tuote line: 455", matti11, tuote.annaTilaaja(1)); 
    tuote.lisaa(matti22); assertEquals("From: Tuote line: 456", matti22, tuote.annaTilaaja(2)); 
    tuote.lisaa(matti12); assertEquals("From: Tuote line: 457", matti12, tuote.annaTilaaja(3)); 
    tuote.lisaa(matti23); assertEquals("From: Tuote line: 458", matti23, tuote.annaTilaaja(4)); 
    assertEquals("From: Tuote line: 459", 5, tuote.getTilaajia()); 
    tuote.tallenna(); 
    String ptulos = "postinro|postitoimipaikka\n" +
    helsinki1.toString() + "\n" +
    helsinki2.toString(); 
    assertEquals("From: Tuote line: 465", null, VertaaTiedosto.vertaaFileString(hakemisto+"/postiosoitteet.dat", ptulos)); 
    String ttulos = "tid|sukunimi etunimi|sähköposti|puhelin|katuosoite|postinumero|aloitti tilaamisen|maksettu\n" +
    matti21.toString() + "\n" +
    matti11.toString() + "\n" +
    matti22.toString() + "\n" +
    matti12.toString() + "\n" +
    matti23.toString(); 
    assertEquals("From: Tuote line: 473", null, VertaaTiedosto.vertaaFileString(hakemisto+"/tilaajat.dat", ttulos)); 
    tuote.lisaa(helsinki3); 
    Tilaaja tilaaja = new Tilaaja(helsinki3.getPostinumero()); 
    tuote.lisaa(tilaaja); 
    tuote.tallenna(); 
    ptulos += "\n" + helsinki3.toString(); 
    assertEquals("From: Tuote line: 481", null, VertaaTiedosto.vertaaFileString(hakemisto+"/postiosoitteet.dat", ptulos)); 
    ttulos += "\n" + tilaaja.toString(); 
    assertEquals("From: Tuote line: 484", null, VertaaTiedosto.vertaaFileString(hakemisto+"/tilaajat.dat", ttulos)); 
    assertEquals("From: Tuote line: 486", true, fptied.delete()); 
    assertEquals("From: Tuote line: 487", true, fttied.delete()); 
    File fbak = new File(hakemisto+"/postiosoitteet.bak"); 
    File fhbak = new File(hakemisto+"/tilaajat.bak"); 
    assertEquals("From: Tuote line: 490", true, fbak.delete()); 
    assertEquals("From: Tuote line: 491", true, fhbak.delete()); 
    assertEquals("From: Tuote line: 492", true, dir.delete()); 
  } // Generated by ComTest END
}