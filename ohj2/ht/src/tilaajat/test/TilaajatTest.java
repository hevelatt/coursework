package tilaajat.test;
// Generated by ComTest BEGIN
import kanta.SailoException;
import java.io.File;
import java.io.IOException;
import fi.jyu.mit.ohj2.VertaaTiedosto;
import java.util.*;
import static org.junit.Assert.*;
import org.junit.*;
import tilaajat.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.24 18:07:01 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class TilaajatTest {



  // Generated by ComTest BEGIN
  /** testLisaa44 */
  @Test
  public void testLisaa44() {    // Tilaajat: 44
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    assertEquals("From: Tilaajat line: 47", 0, tilaajat.getLkm()); 
    tilaajat.lisaa(matti1); assertEquals("From: Tilaajat line: 48", 1, tilaajat.getLkm()); 
    tilaajat.lisaa(matti2); assertEquals("From: Tilaajat line: 49", 2, tilaajat.getLkm()); 
    tilaajat.lisaa(matti1); assertEquals("From: Tilaajat line: 50", 3, tilaajat.getLkm()); 
    assertEquals("From: Tilaajat line: 51", matti1, tilaajat.anna(0)); 
    assertEquals("From: Tilaajat line: 52", matti2, tilaajat.anna(1)); 
    assertEquals("From: Tilaajat line: 53", matti1, tilaajat.anna(2)); 
    assertEquals("From: Tilaajat line: 54", false, tilaajat.anna(1) == matti1); 
    assertEquals("From: Tilaajat line: 55", true, tilaajat.anna(1) == matti2); 
    try {
    assertEquals("From: Tilaajat line: 56", matti1, tilaajat.anna(3)); 
    fail("Tilaajat: 56 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tilaajat.lisaa(matti1); assertEquals("From: Tilaajat line: 57", 4, tilaajat.getLkm()); 
    tilaajat.lisaa(matti1); assertEquals("From: Tilaajat line: 58", 5, tilaajat.getLkm()); 
    tilaajat.lisaa(matti1); assertEquals("From: Tilaajat line: 59", 6, tilaajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa79 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa79() throws CloneNotSupportedException {    // Tilaajat: 79
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    matti1.rekisteroi(); matti2.rekisteroi(); 
    assertEquals("From: Tilaajat line: 84", 0, tilaajat.getLkm()); 
    tilaajat.korvaaTaiLisaa(matti1); assertEquals("From: Tilaajat line: 85", 1, tilaajat.getLkm()); 
    tilaajat.korvaaTaiLisaa(matti2); assertEquals("From: Tilaajat line: 86", 2, tilaajat.getLkm()); 
    Tilaaja matti3 = matti1.clone(); 
    assertEquals("From: Tilaajat line: 88", "", matti1.anna(1)); 
    matti3.aseta(1, "matti3"); 
    assertEquals("From: Tilaajat line: 90", false, matti3.anna(1).equals(matti1.anna(1)));  // eri nimet
    assertEquals("From: Tilaajat line: 91", matti1.getTilaajaID(), matti3.getTilaajaID());  // sama tilaajaID
    tilaajat.korvaaTaiLisaa(matti3); assertEquals("From: Tilaajat line: 92", 2, tilaajat.getLkm()); 
    assertEquals("From: Tilaajat line: 93", "matti3", tilaajat.anna(0).anna(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsiTilaajaID113 */
  @Test
  public void testEtsiTilaajaID113() {    // Tilaajat: 113
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(), matti3 = new Tilaaja(); 
    matti1.rekisteroi(); matti2.rekisteroi(); matti3.rekisteroi(); 
    int tid = matti1.getTilaajaID(); 
    tilaajat.lisaa(matti1); tilaajat.lisaa(matti2); tilaajat.lisaa(matti3); 
    assertEquals("From: Tilaajat line: 119", 0, tilaajat.etsiTilaajaID(tid)); 
    assertEquals("From: Tilaajat line: 120", true, tid + 1 == matti2.getTilaajaID()); 
    assertEquals("From: Tilaajat line: 121", 1, tilaajat.etsiTilaajaID(tid + 1)); 
    assertEquals("From: Tilaajat line: 122", 2, tilaajat.etsiTilaajaID(tid + 2)); 
    assertEquals("From: Tilaajat line: 123", -1, tilaajat.etsiTilaajaID(tid + 3)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testPoista136 */
  @Test
  public void testPoista136() {    // Tilaajat: 136
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(), matti3 = new Tilaaja(); 
    matti1.rekisteroi(); matti2.rekisteroi(); matti3.rekisteroi(); 
    int tid = matti1.getTilaajaID(); 
    assertEquals("From: Tilaajat line: 141", true, tid + 1 == matti2.getTilaajaID()); 
    assertEquals("From: Tilaajat line: 142", true, tid + 2 == matti3.getTilaajaID()); 
    tilaajat.lisaa(matti1); tilaajat.lisaa(matti2); tilaajat.lisaa(matti3); 
    assertEquals("From: Tilaajat line: 144", 3, tilaajat.getLkm()); 
    assertEquals("From: Tilaajat line: 145", 0, tilaajat.etsiTilaajaID(tid)); 
    assertEquals("From: Tilaajat line: 146", 1, tilaajat.etsiTilaajaID(tid + 1)); 
    assertEquals("From: Tilaajat line: 147", 2, tilaajat.etsiTilaajaID(tid + 2)); 
    tilaajat.poista(tid + 1); assertEquals("From: Tilaajat line: 148", 2, tilaajat.getLkm()); 
    assertEquals("From: Tilaajat line: 149", 0, tilaajat.etsiTilaajaID(tid)); 
    assertEquals("From: Tilaajat line: 150", -1, tilaajat.etsiTilaajaID(tid + 1)); 
    assertEquals("From: Tilaajat line: 151", 1, tilaajat.etsiTilaajaID(tid + 2)); 
    assertEquals("From: Tilaajat line: 152", matti3, tilaajat.anna(1)); 
    tilaajat.poista(tid + 2); assertEquals("From: Tilaajat line: 153", 1, tilaajat.getLkm()); 
    assertEquals("From: Tilaajat line: 154", -1, tilaajat.etsiTilaajaID(tid + 2)); 
    try {
    assertEquals("From: Tilaajat line: 155", matti3, tilaajat.anna(1)); 
    fail("Tilaajat: 155 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna174 */
  @Test
  public void testAnna174() {    // Tilaajat: 174
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    tilaajat.lisaa(matti1); 
    assertEquals("From: Tilaajat line: 178", matti1, tilaajat.anna(0)); 
    try {
    assertEquals("From: Tilaajat line: 179", matti2, tilaajat.anna(1)); 
    fail("Tilaajat: 179 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tilaajat.lisaa(matti2); 
    assertEquals("From: Tilaajat line: 181", matti2, tilaajat.anna(1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta195 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta195() throws SailoException {    // Tilaajat: 195
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    Tilaaja matti3 = new Tilaaja(); 
    matti1.taytaMattiTiedoilla(10); 
    matti2.taytaMattiTiedoilla(20); 
    matti3.taytaMattiTiedoilla(30); 
    String hakemisto = "testiakuankka"; 
    String tiedNimi = hakemisto+"/tilaajat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    tilaajat.lueTiedostosta(tiedNimi); 
    fail("Tilaajat: 212 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    tilaajat.lisaa(matti1); 
    tilaajat.lisaa(matti2); 
    assertEquals("From: Tilaajat line: 215", matti1.toString(), tilaajat.anna(0).toString()); 
    assertEquals("From: Tilaajat line: 216", matti2.toString(), tilaajat.anna(1).toString()); 
    try {
    assertEquals("From: Tilaajat line: 217", matti3.toString(), tilaajat.anna(2).toString()); 
    fail("Tilaajat: 217 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tilaajat.tallenna(); 
    tilaajat = new Tilaajat(); 
    try {
    assertEquals("From: Tilaajat line: 222", matti1.toString(), tilaajat.anna(0).toString()); 
    fail("Tilaajat: 222 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tilaajat.lueTiedostosta(tiedNimi); 
    assertEquals("From: Tilaajat line: 224", matti1.toString(), tilaajat.anna(0).toString()); 
    assertEquals("From: Tilaajat line: 225", matti2.toString(), tilaajat.anna(1).toString()); 
    try {
    assertEquals("From: Tilaajat line: 226", matti3.toString(), tilaajat.anna(2).toString()); 
    fail("Tilaajat: 226 Did not throw IndexOutOfBoundsException");
    } catch(IndexOutOfBoundsException _e_){ _e_.getMessage(); }
    tilaajat.lisaa(matti3); 
    assertEquals("From: Tilaajat line: 229", matti3.toString(), tilaajat.anna(2).toString()); 
    tilaajat.tallenna(); 
    assertEquals("From: Tilaajat line: 232", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Tilaajat line: 234", true, fbak.delete()); 
    assertEquals("From: Tilaajat line: 235", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testTallenna273 
   * @throws SailoException when error
   * @throws IOException when error
   */
  @Test
  public void testTallenna273() throws SailoException, IOException {    // Tilaajat: 273
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(), matti2 = new Tilaaja(); 
    Tilaaja matti3 = new Tilaaja(); 
    matti1.taytaMattiTiedoilla(10); 
    matti2.taytaMattiTiedoilla(20); 
    matti3.taytaMattiTiedoilla(30); 
    String hakemisto = "testiakuankka"; 
    String tiedNimi = hakemisto+"/tilaajat"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    tilaajat.lueTiedostosta(tiedNimi); 
    fail("Tilaajat: 292 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    tilaajat.lisaa(matti1); 
    tilaajat.lisaa(matti2); 
    assertEquals("From: Tilaajat line: 295", matti1.toString(), tilaajat.anna(0).toString()); 
    assertEquals("From: Tilaajat line: 296", matti2.toString(), tilaajat.anna(1).toString()); 
    tilaajat.tallenna(); 
    String tulos = "tid|sukunimi etunimi|sähköposti|puhelin|katuosoite|postinumero|aloitti tilaamisen|maksettu\n" +
    matti1.toString() + "\n" +
    matti2.toString(); 
    assertEquals("From: Tilaajat line: 303", null, VertaaTiedosto.vertaaFileString(tiedNimi+".dat", tulos)); 
    tilaajat.lisaa(matti3); 
    assertEquals("From: Tilaajat line: 306", matti3.toString(), tilaajat.anna(2).toString()); 
    tilaajat.tallenna(); 
    tulos = "tid|sukunimi etunimi|sähköposti|puhelin|katuosoite|postinumero|aloitti tilaamisen|maksettu\n" +
    matti1.toString() + "\n" +
    matti2.toString() + "\n" +
    matti3.toString(); 
    assertEquals("From: Tilaajat line: 314", null, VertaaTiedosto.vertaaFileString(tiedNimi+".dat", tulos)); 
    assertEquals("From: Tilaajat line: 316", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Tilaajat line: 318", true, fbak.delete()); 
    assertEquals("From: Tilaajat line: 319", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetLkm349 */
  @Test
  public void testGetLkm349() {    // Tilaajat: 349
    Tilaajat tilaajat = new Tilaajat(); 
    assertEquals("From: Tilaajat line: 351", 0, tilaajat.getLkm()); 
    Tilaaja matti = new Tilaaja(); matti.rekisteroi(); 
    tilaajat.lisaa(matti); 
    assertEquals("From: Tilaajat line: 354", 1, tilaajat.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTiedostonPerusNimi365 */
  @Test
  public void testGetTiedostonPerusNimi365() {    // Tilaajat: 365
    Tilaajat tilaajat = new Tilaajat(); 
    assertEquals("From: Tilaajat line: 367", "tilaajat", tilaajat.getTiedostonPerusNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testSetTiedostonPerusNimi378 */
  @Test
  public void testSetTiedostonPerusNimi378() {    // Tilaajat: 378
    Tilaajat tilaajat = new Tilaajat(); 
    assertEquals("From: Tilaajat line: 380", "tilaajat", tilaajat.getTiedostonPerusNimi()); 
    tilaajat.setTiedostonPerusNimi("testi"); 
    assertEquals("From: Tilaajat line: 382", "testi", tilaajat.getTiedostonPerusNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetTiedostonNimi393 */
  @Test
  public void testGetTiedostonNimi393() {    // Tilaajat: 393
    Tilaajat tilaajat = new Tilaajat(); 
    assertEquals("From: Tilaajat line: 395", "tilaajat.dat", tilaajat.getTiedostonNimi()); 
    tilaajat.setTiedostonPerusNimi("testi"); 
    assertEquals("From: Tilaajat line: 397", "testi.dat", tilaajat.getTiedostonNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetBakNimi409 */
  @Test
  public void testGetBakNimi409() {    // Tilaajat: 409
    Tilaajat tilaajat = new Tilaajat(); 
    assertEquals("From: Tilaajat line: 411", "tilaajat.bak", tilaajat.getBakNimi()); 
    tilaajat.setTiedostonPerusNimi("testi"); 
    assertEquals("From: Tilaajat line: 413", "testi.bak", tilaajat.getBakNimi()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnnaTilaajat425 */
  @Test
  public void testAnnaTilaajat425() {    // Tilaajat: 425
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja matti1 = new Tilaaja(10); tilaajat.lisaa(matti1); 
    Tilaaja matti2 = new Tilaaja(20); tilaajat.lisaa(matti2); 
    Tilaaja matti3 = new Tilaaja(30); tilaajat.lisaa(matti3); 
    Tilaaja matti4 = new Tilaaja(10); tilaajat.lisaa(matti4); 
    Tilaaja matti5 = new Tilaaja(10); tilaajat.lisaa(matti5); 
    Tilaaja matti6 = new Tilaaja(20); tilaajat.lisaa(matti6); 
    List<Tilaaja> loytyneet; 
    loytyneet = tilaajat.annaTilaajat(1); 
    assertEquals("From: Tilaajat line: 438", 0, loytyneet.size()); 
    loytyneet = tilaajat.annaTilaajat(20); 
    assertEquals("From: Tilaajat line: 440", 2, loytyneet.size()); 
    assertEquals("From: Tilaajat line: 441", true, loytyneet.get(0) == matti2); 
    assertEquals("From: Tilaajat line: 442", true, loytyneet.get(1) == matti6); 
    loytyneet = tilaajat.annaTilaajat(30); 
    assertEquals("From: Tilaajat line: 444", 1, loytyneet.size()); 
    assertEquals("From: Tilaajat line: 445", true, loytyneet.get(0) == matti3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testEtsi462 */
  @Test
  public void testEtsi462() {    // Tilaajat: 462
    Tilaajat tilaajat = new Tilaajat(); 
    Tilaaja tilaaja1 = new Tilaaja(); tilaaja1.parse(" 1|Pukki Joulu      ||||99999||1"); 
    Tilaaja tilaaja2 = new Tilaaja(); tilaaja2.parse(" 3|Tietäväinen Teijo||||40014||1"); 
    Tilaaja tilaaja3 = new Tilaaja(); tilaaja3.parse(" 4|Toljanteri Tonttu||||99999||0"); 
    Tilaaja tilaaja4 = new Tilaaja(); tilaaja4.parse(" 9|Meikäläinen Matti||||00010||1"); 
    Tilaaja tilaaja5 = new Tilaaja(); tilaaja5.parse("13|Tietäväinen Tuija||||40014||0"); 
    tilaajat.lisaa(tilaaja1); tilaajat.lisaa(tilaaja2); tilaajat.lisaa(tilaaja3); 
    tilaajat.lisaa(tilaaja4); tilaajat.lisaa(tilaaja5); 
    List<Tilaaja> loytyneet; 
    loytyneet = tilaajat.etsi("*k*", 1);  // etsi nimen perusteella
    assertEquals("From: Tilaajat line: 474", 2, loytyneet.size()); 
    assertEquals("From: Tilaajat line: 475", true, loytyneet.get(0) == tilaaja1); 
    assertEquals("From: Tilaajat line: 476", true, loytyneet.get(1) == tilaaja4); 
    loytyneet = tilaajat.etsi("*0*", 7);  // etsi maksettu perusteella
    assertEquals("From: Tilaajat line: 479", 2, loytyneet.size()); 
    assertEquals("From: Tilaajat line: 480", true, loytyneet.get(0) == tilaaja3); 
    assertEquals("From: Tilaajat line: 481", true, loytyneet.get(1) == tilaaja5); 
    loytyneet = tilaajat.etsi(null, -1); 
    assertEquals("From: Tilaajat line: 484", 5, loytyneet.size()); 
  } // Generated by ComTest END
}