package tilaajat.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import tilaajat.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.07.24 18:06:53 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class TilaajaTest {



  // Generated by ComTest BEGIN
  /** testGetTilaajaID49 */
  @Test
  public void testGetTilaajaID49() {    // Tilaaja: 49
    Tilaaja matti = new Tilaaja(); 
    assertEquals("From: Tilaaja line: 51", 0, matti.getTilaajaID()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testGetPostinumero62 */
  @Test
  public void testGetPostinumero62() {    // Tilaaja: 62
    Tilaaja matti = new Tilaaja(); 
    assertEquals("From: Tilaaja line: 64", 0, matti.getPostinumero()); 
    matti = new Tilaaja(10); 
    assertEquals("From: Tilaaja line: 66", 10, matti.getPostinumero()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAnna93 */
  @Test
  public void testAnna93() {    // Tilaaja: 93
    Tilaaja matti = new Tilaaja(); 
    assertEquals("From: Tilaaja line: 95", "0", matti.anna(0)); 
    matti.taytaMattiTiedoilla(10); 
    { String _l_=matti.anna(1),_r_="Meikäläinen Matti .*"; if ( !_l_.matches(_r_) ) fail("From: Tilaaja line: 97" + " does not match: ["+ _l_ + "] != [" + _r_ + "]");}; 
    assertEquals("From: Tilaaja line: 98", "matti.meikalainen@gmail.com", matti.anna(2)); 
    assertEquals("From: Tilaaja line: 99", "00010", matti.anna(5)); 
    assertEquals("From: Tilaaja line: 100", "1", matti.anna(7)); 
    assertEquals("From: Tilaaja line: 101", "???", matti.anna(9)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testAseta143 */
  @Test
  public void testAseta143() {    // Tilaaja: 143
    Tilaaja tilaaja = new Tilaaja(); 
    assertEquals("From: Tilaaja line: 145", null, tilaaja.aseta(0, "50")); assertEquals("From: Tilaaja line: 145", "50", tilaaja.anna(0)); 
    assertEquals("From: Tilaaja line: 146", null, tilaaja.aseta(0, "viisi")); assertEquals("From: Tilaaja line: 146", "50", tilaaja.anna(0)); 
    assertEquals("From: Tilaaja line: 147", null, tilaaja.aseta(1, "Matti")); assertEquals("From: Tilaaja line: 147", "Matti", tilaaja.anna(1)); 
    assertEquals("From: Tilaaja line: 148", null, tilaaja.aseta(1, "  ")); assertEquals("From: Tilaaja line: 148", "Matti", tilaaja.anna(1)); 
    assertEquals("From: Tilaaja line: 149", "email: väärä muoto", tilaaja.aseta(2, "kääk")); 
    assertEquals("From: Tilaaja line: 150", null, tilaaja.aseta(2, "kaak@gmail.com")); 
    assertEquals("From: Tilaaja line: 151", "puhelinnumero: vain numeroita", tilaaja.aseta(3, "kääk")); 
    assertEquals("From: Tilaaja line: 152", null, tilaaja.aseta(3, "+358123456789")); 
    assertEquals("From: Tilaaja line: 153", "postinumero: liian lyhyt", tilaaja.aseta(5, "0050")); 
    assertEquals("From: Tilaaja line: 154", "postinumero: liian pitkä", tilaaja.aseta(5, "000050")); 
    assertEquals("From: Tilaaja line: 155", "postinumero: vain numeroita", tilaaja.aseta(5, "a0050")); 
    assertEquals("From: Tilaaja line: 156", null, tilaaja.aseta(6, "1990-01-01")); 
    assertEquals("From: Tilaaja line: 157", "aloitti tilaamisen: muotoa VVVV-KK-PP", tilaaja.aseta(6, "90-1-1")); 
    assertEquals("From: Tilaaja line: 158", "maksettu: 0 tai 1", tilaaja.aseta(7, "kääk")); 
    assertEquals("From: Tilaaja line: 159", null, tilaaja.aseta(7, "1")); assertEquals("From: Tilaaja line: 159", "1", tilaaja.anna(7)); 
    assertEquals("From: Tilaaja line: 160", null, tilaaja.aseta(7, "0")); assertEquals("From: Tilaaja line: 160", "0", tilaaja.anna(7)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi264 */
  @Test
  public void testRekisteroi264() {    // Tilaaja: 264
    Tilaaja matti1 = new Tilaaja(); 
    assertEquals("From: Tilaaja line: 266", 0, matti1.getTilaajaID()); 
    matti1.rekisteroi(); 
    Tilaaja matti2 = new Tilaaja(); 
    matti2.rekisteroi(); 
    int n1 = matti1.getTilaajaID(); 
    int n2 = matti2.getTilaajaID(); 
    assertEquals("From: Tilaaja line: 272", n2 - 1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString285 */
  @Test
  public void testToString285() {    // Tilaaja: 285
    Tilaaja tilaaja = new Tilaaja(); 
    tilaaja.parse("  9  | Meikäläinen Matti |matti.meikalainen@gmail.com|2507899879|Pihkakuja 5|00010|1970-02-30|1"); 
    assertEquals("From: Tilaaja line: 288", "9|Meikäläinen Matti|matti.meikalainen@gmail.com|2507899879|Pihkakuja 5|00010|1970-02-30|1", tilaaja.toString()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse308 */
  @Test
  public void testParse308() {    // Tilaaja: 308
    Tilaaja tilaaja = new Tilaaja(); 
    tilaaja.parse("  9  | Meikäläinen Matti |matti.meikalainen@gmail.com|2507899879|Pihkakuja 5|00010|1970-02-30|1"); 
    assertEquals("From: Tilaaja line: 311", 9, tilaaja.getTilaajaID()); 
    assertEquals("From: Tilaaja line: 312", "9|Meikäläinen Matti|matti.meikalainen@gmail.com|2507899879|Pihkakuja 5|00010|1970-02-30|1", tilaaja.toString()); 
    tilaaja.parse("|||||||0"); 
    assertEquals("From: Tilaaja line: 314", "9|Meikäläinen Matti|matti.meikalainen@gmail.com|2507899879|Pihkakuja 5|00010|1970-02-30|0", tilaaja.toString()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone328 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone328() throws CloneNotSupportedException {    // Tilaaja: 328
    Tilaaja tilaaja = new Tilaaja(); 
    tilaaja.parse("9|Meikäläinen Matti|matti.meikalainen@gmail.com"); 
    Tilaaja kopio = tilaaja.clone(); 
    assertEquals("From: Tilaaja line: 333", tilaaja.toString(), kopio.toString());  // kopion sisältö on sama
    tilaaja.parse("20|Käkelä Kia|kiak@yahoo.com"); 
    assertEquals("From: Tilaaja line: 335", false, kopio.toString().equals(tilaaja.toString()));  // kopio ei muutu kun alkuperäistä muutetaan
  } // Generated by ComTest END
}